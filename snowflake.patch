diff '--color=auto' -ruN snowflake/client/snowflake.go snowflake_mod/client/snowflake.go
--- snowflake/client/snowflake.go	2022-02-10 00:07:35.158288734 -0500
+++ snowflake_mod/client/snowflake.go	2022-02-10 00:07:28.938288604 -0500
@@ -1,8 +1,7 @@
 // Client transport plugin for the Snowflake pluggable transport.
-package main
+package snowflakeclient
 
 import (
-	"flag"
 	"io"
 	"io/ioutil"
 	"log"
@@ -20,6 +19,8 @@
 	"git.torproject.org/pluggable-transports/snowflake.git/v2/common/safelog"
 )
 
+var sigChan = make(chan os.Signal, 1)
+
 const (
 	DefaultSnowflakeCapacity = 1
 )
@@ -120,23 +121,14 @@
 	}
 }
 
-func main() {
-	iceServersCommas := flag.String("ice", "", "comma-separated list of ICE servers")
-	brokerURL := flag.String("url", "", "URL of signaling broker")
-	frontDomain := flag.String("front", "", "front domain")
-	ampCacheURL := flag.String("ampcache", "", "URL of AMP cache to use as a proxy for signaling")
-	logFilename := flag.String("log", "", "name of log file")
-	logToStateDir := flag.Bool("log-to-state-dir", false, "resolve the log file relative to tor's pt state dir")
-	keepLocalAddresses := flag.Bool("keep-local-addresses", false, "keep local LAN address ICE candidates")
-	unsafeLogging := flag.Bool("unsafe-logging", false, "prevent logs from being scrubbed")
-	max := flag.Int("max", DefaultSnowflakeCapacity,
-		"capacity for number of multiplexed WebRTC peers")
-
-	// Deprecated
-	oldLogToStateDir := flag.Bool("logToStateDir", false, "use -log-to-state-dir instead")
-	oldKeepLocalAddresses := flag.Bool("keepLocalAddresses", false, "use -keep-local-addresses instead")
+func Start(port *int, iceServersCommas, brokerURL, frontDomain, ampCacheURL, logFilename *string, logToStateDir, keepLocalAddresses, unsafeLogging *bool, max *int) {
+
+	if *max < DefaultSnowflakeCapacity {
+		*max = DefaultSnowflakeCapacity
+	}
 
-	flag.Parse()
+	oldLogToStateDir := logToStateDir
+	oldKeepLocalAddresses := keepLocalAddresses
 
 	log.SetFlags(log.LstdFlags | log.LUTC)
 
@@ -196,7 +188,7 @@
 		switch methodName {
 		case "snowflake":
 			// TODO: Be able to recover when SOCKS dies.
-			ln, err := pt.ListenSocks("tcp", "127.0.0.1:0")
+			ln, err := pt.ListenSocks("tcp", net.JoinHostPort("127.0.0.1", strconv.Itoa(*port)))
 			if err != nil {
 				pt.CmethodError(methodName, err.Error())
 				break
@@ -211,7 +203,6 @@
 	}
 	pt.CmethodsDone()
 
-	sigChan := make(chan os.Signal, 1)
 	signal.Notify(sigChan, syscall.SIGTERM)
 
 	if os.Getenv("TOR_PT_EXIT_ON_STDIN_CLOSE") == "1" {
@@ -238,3 +229,8 @@
 	wg.Wait()
 	log.Println("snowflake is done.")
 }
+
+func Stop() {
+	log.Println("synthesizing SIGTERM because of explicit Stop call")
+	sigChan <- syscall.SIGTERM
+}
\ No newline at end of file
diff '--color=auto' -ruN snowflake/proxy/lib/snowflake.go snowflake_mod/proxy/lib/snowflake.go
--- snowflake/proxy/lib/snowflake.go	2022-02-10 00:07:35.158288734 -0500
+++ snowflake_mod/proxy/lib/snowflake.go	2022-02-10 00:07:28.938288604 -0500
@@ -117,6 +117,9 @@
 	NATTypeMeasurementInterval time.Duration
 	EventDispatcher            event.SnowflakeEventDispatcher
 	shutdown                   chan struct{}
+
+	ClientConnectedCallback func()
+
 }
 
 // Checks whether an IP address is a remote address for the client
@@ -199,7 +202,7 @@
 		default:
 			numClients := int((tokens.count() / 8) * 8) // Round down to 8
 			currentNATTypeLoaded := getCurrentNATType()
-			body, err := messages.EncodePollRequest(sid, "standalone", currentNATTypeLoaded, numClients)
+			body, err := messages.EncodePollRequest(sid, "iptproxy", currentNATTypeLoaded, numClients)
 			if err != nil {
 				log.Printf("Error encoding poll message: %s", err.Error())
 				return nil
@@ -495,6 +498,7 @@
 	select {
 	case <-dataChan:
 		log.Println("Connection successful.")
+		go sf.ClientConnectedCallback()
 	case <-time.After(dataChannelTimeout):
 		log.Println("Timed out waiting for client to open data channel.")
 		if err := pc.Close(); err != nil {
