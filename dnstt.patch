diff --git a/dnstt-client/dns.go b/dnstt-client/dns.go
index af1ad88..610c118 100644
--- a/dnstt-client/dns.go
+++ b/dnstt-client/dns.go
@@ -1,4 +1,4 @@
-package main
+package dnsttclient
 
 import (
 	"bytes"
diff --git a/dnstt-client/dns_test.go b/dnstt-client/dns_test.go
index e09ccc2..6c31dd6 100644
--- a/dnstt-client/dns_test.go
+++ b/dnstt-client/dns_test.go
@@ -1,4 +1,4 @@
-package main
+package dnsttclient
 
 import (
 	"bytes"
diff --git a/dnstt-client/http.go b/dnstt-client/http.go
index 560735a..104d510 100644
--- a/dnstt-client/http.go
+++ b/dnstt-client/http.go
@@ -1,4 +1,4 @@
-package main
+package dnsttclient
 
 import (
 	"bytes"
diff --git a/dnstt-client/http_test.go b/dnstt-client/http_test.go
index 1b18bc3..9382091 100644
--- a/dnstt-client/http_test.go
+++ b/dnstt-client/http_test.go
@@ -1,4 +1,4 @@
-package main
+package dnsttclient
 
 import (
 	"testing"
diff --git a/dnstt-client/main.go b/dnstt-client/main.go
index 2ef515f..85a82fb 100644
--- a/dnstt-client/main.go
+++ b/dnstt-client/main.go
@@ -31,20 +31,18 @@
 //     -utls '3*Firefox,2*Chrome,1*iOS'
 //     -utls Firefox
 //     -utls none
-package main
+package dnsttclient
 
 import (
 	"context"
 	"crypto/tls"
 	"errors"
-	"flag"
 	"fmt"
 	"io"
 	"log"
 	"net"
 	"net/http"
 	"os"
-	"strings"
 	"sync"
 	"time"
 
@@ -59,6 +57,8 @@ import (
 // smux streams will be closed after this much time without receiving data.
 const idleTimeout = 2 * time.Minute
 
+var shouldRun = false
+
 // dnsNameCapacity returns the number of bytes remaining for encoded data after
 // including domain in a DNS name.
 func dnsNameCapacity(domain dns.Name) int {
@@ -214,7 +214,9 @@ func run(pubkey []byte, domain dns.Name, localAddr *net.TCPAddr, remoteAddr net.
 	}
 	defer sess.Close()
 
-	for {
+	shouldRun = true
+
+	for shouldRun {
 		local, err := ln.Accept()
 		if err != nil {
 			if err, ok := err.(net.Error); ok && err.Temporary() {
@@ -230,103 +232,36 @@ func run(pubkey []byte, domain dns.Name, localAddr *net.TCPAddr, remoteAddr net.
 			}
 		}()
 	}
-}
-
-func main() {
-	var dohURL string
-	var dotAddr string
-	var pubkeyFilename string
-	var pubkeyString string
-	var udpAddr string
-	var utlsDistribution string
 
-	flag.Usage = func() {
-		fmt.Fprintf(flag.CommandLine.Output(), `Usage:
-  %[1]s [-doh URL|-dot ADDR|-udp ADDR] -pubkey-file PUBKEYFILE DOMAIN LOCALADDR
+    return fmt.Errorf("Shutdown upon request.")
+}
 
-Examples:
-  %[1]s -doh https://resolver.example/dns-query -pubkey-file server.pub t.example.com 127.0.0.1:7000
-  %[1]s -dot resolver.example:853 -pubkey-file server.pub t.example.com 127.0.0.1:7000
-
-`, os.Args[0])
-		flag.PrintDefaults()
-		labels := make([]string, 0, len(utlsClientHelloIDMap))
-		labels = append(labels, "none")
-		for _, entry := range utlsClientHelloIDMap {
-			labels = append(labels, entry.Label)
-		}
-		fmt.Fprintf(flag.CommandLine.Output(), `
-Known TLS fingerprints for -utls are:
-`)
-		i := 0
-		for i < len(labels) {
-			var line strings.Builder
-			fmt.Fprintf(&line, "  %s", labels[i])
-			w := 2 + len(labels[i])
-			i++
-			for i < len(labels) && w+1+len(labels[i]) <= 72 {
-				fmt.Fprintf(&line, " %s", labels[i])
-				w += 1 + len(labels[i])
-				i++
-			}
-			fmt.Fprintln(flag.CommandLine.Output(), line.String())
-		}
-	}
-	flag.StringVar(&dohURL, "doh", "", "URL of DoH resolver")
-	flag.StringVar(&dotAddr, "dot", "", "address of DoT resolver")
-	flag.StringVar(&pubkeyString, "pubkey", "", fmt.Sprintf("server public key (%d hex digits)", noise.KeyLen*2))
-	flag.StringVar(&pubkeyFilename, "pubkey-file", "", "read server public key from file")
-	flag.StringVar(&udpAddr, "udp", "", "address of UDP DNS resolver")
-	flag.StringVar(&utlsDistribution, "utls",
-		"3*Firefox_65,1*Firefox_63,1*iOS_12_1",
-		"choose TLS fingerprint from weighted distribution")
-	flag.Parse()
+func Start(dohURL, dotAddr, pubkeyString, resolver, listenAddr *string) {
+	utlsDistribution := "3*Firefox_65,1*Firefox_63,1*iOS_12_1"
 
 	log.SetFlags(log.LstdFlags | log.LUTC)
 
-	if flag.NArg() != 2 {
-		flag.Usage()
-		os.Exit(1)
-	}
-	domain, err := dns.ParseName(flag.Arg(0))
+	domain, err := dns.ParseName(*resolver)
 	if err != nil {
-		fmt.Fprintf(os.Stderr, "invalid domain %+q: %v\n", flag.Arg(0), err)
-		os.Exit(1)
+		fmt.Fprintf(os.Stderr, "invalid domain %+q: %v\n", resolver, err)
+		return
 	}
-	localAddr, err := net.ResolveTCPAddr("tcp", flag.Arg(1))
+	localAddr, err := net.ResolveTCPAddr("tcp", *listenAddr)
 	if err != nil {
-		fmt.Fprintln(os.Stderr, err)
-		os.Exit(1)
+		log.Fatal(err)
+		return
 	}
 
-	var pubkey []byte
-	if pubkeyFilename != "" && pubkeyString != "" {
-		fmt.Fprintf(os.Stderr, "only one of -pubkey and -pubkey-file may be used\n")
-		os.Exit(1)
-	} else if pubkeyFilename != "" {
-		var err error
-		pubkey, err = readKeyFromFile(pubkeyFilename)
-		if err != nil {
-			fmt.Fprintf(os.Stderr, "cannot read pubkey from file: %v\n", err)
-			os.Exit(1)
-		}
-	} else if pubkeyString != "" {
-		var err error
-		pubkey, err = noise.DecodeKey(pubkeyString)
-		if err != nil {
-			fmt.Fprintf(os.Stderr, "pubkey format error: %v\n", err)
-			os.Exit(1)
-		}
-	}
-	if len(pubkey) == 0 {
-		fmt.Fprintf(os.Stderr, "the -pubkey or -pubkey-file option is required\n")
-		os.Exit(1)
-	}
+    pubkey, err := noise.DecodeKey(*pubkeyString)
+    if err != nil {
+        log.Printf("pubkey format error: %v\n", err)
+        return
+    }
 
 	utlsClientHelloID, err := sampleUTLSDistribution(utlsDistribution)
 	if err != nil {
-		fmt.Fprintf(os.Stderr, "parsing -utls: %v\n", err)
-		os.Exit(1)
+		log.Printf("parsing -utls: %v\n", err)
+		return
 	}
 	if utlsClientHelloID != nil {
 		log.Printf("uTLS fingerprint %s %s", utlsClientHelloID.Client, utlsClientHelloID.Version)
@@ -341,7 +276,7 @@ Known TLS fingerprints for -utls are:
 		f func(string) (net.Addr, net.PacketConn, error)
 	}{
 		// -doh
-		{dohURL, func(s string) (net.Addr, net.PacketConn, error) {
+		{*dohURL, func(s string) (net.Addr, net.PacketConn, error) {
 			addr := turbotunnel.DummyAddr{}
 			var rt http.RoundTripper
 			if utlsClientHelloID == nil {
@@ -356,11 +291,11 @@ Known TLS fingerprints for -utls are:
 			} else {
 				rt = NewUTLSRoundTripper(nil, utlsClientHelloID)
 			}
-			pconn, err := NewHTTPPacketConn(rt, dohURL, 32)
+			pconn, err := NewHTTPPacketConn(rt, *dohURL, 32)
 			return addr, pconn, err
 		}},
 		// -dot
-		{dotAddr, func(s string) (net.Addr, net.PacketConn, error) {
+		{*dotAddr, func(s string) (net.Addr, net.PacketConn, error) {
 			addr := turbotunnel.DummyAddr{}
 			var dialTLSContext func(ctx context.Context, network, addr string) (net.Conn, error)
 			if utlsClientHelloID == nil {
@@ -370,16 +305,7 @@ Known TLS fingerprints for -utls are:
 					return utlsDialContext(ctx, network, addr, nil, utlsClientHelloID)
 				}
 			}
-			pconn, err := NewTLSPacketConn(dotAddr, dialTLSContext)
-			return addr, pconn, err
-		}},
-		// -udp
-		{udpAddr, func(s string) (net.Addr, net.PacketConn, error) {
-			addr, err := net.ResolveUDPAddr("udp", s)
-			if err != nil {
-				return nil, nil, err
-			}
-			pconn, err := net.ListenUDP("udp", nil)
+			pconn, err := NewTLSPacketConn(*dotAddr, dialTLSContext)
 			return addr, pconn, err
 		}},
 	} {
@@ -387,19 +313,19 @@ Known TLS fingerprints for -utls are:
 			continue
 		}
 		if pconn != nil {
-			fmt.Fprintf(os.Stderr, "only one of -doh, -dot, and -udp may be given\n")
-			os.Exit(1)
+			log.Printf("only one of dohURL or dotAddr may be given\n")
+			return
 		}
 		var err error
 		remoteAddr, pconn, err = opt.f(opt.s)
 		if err != nil {
-			fmt.Fprintln(os.Stderr, err)
-			os.Exit(1)
+		    log.Fatal(err)
+			return
 		}
 	}
 	if pconn == nil {
-		fmt.Fprintf(os.Stderr, "one of -doh, -dot, or -udp is required\n")
-		os.Exit(1)
+		log.Printf("one of dohURL or dotAddr is required\n")
+		return
 	}
 
 	pconn = NewDNSPacketConn(pconn, remoteAddr, domain)
@@ -408,3 +334,7 @@ Known TLS fingerprints for -utls are:
 		log.Fatal(err)
 	}
 }
+
+func Stop() {
+    shouldRun = false
+}
diff --git a/dnstt-client/main_test.go b/dnstt-client/main_test.go
index 071fc50..412a61b 100644
--- a/dnstt-client/main_test.go
+++ b/dnstt-client/main_test.go
@@ -1,4 +1,4 @@
-package main
+package dnsttclient
 
 import (
 	"bytes"
diff --git a/dnstt-client/tls.go b/dnstt-client/tls.go
index 8897237..64a51ac 100644
--- a/dnstt-client/tls.go
+++ b/dnstt-client/tls.go
@@ -1,4 +1,4 @@
-package main
+package dnsttclient
 
 import (
 	"bufio"
diff --git a/dnstt-client/utls.go b/dnstt-client/utls.go
index 7a6af56..2f01a37 100644
--- a/dnstt-client/utls.go
+++ b/dnstt-client/utls.go
@@ -1,4 +1,4 @@
-package main
+package dnsttclient
 
 // Support code for TLS camouflage using uTLS.
 
diff --git a/dnstt-client/weightedlist.go b/dnstt-client/weightedlist.go
index 6ff599a..e73c149 100644
--- a/dnstt-client/weightedlist.go
+++ b/dnstt-client/weightedlist.go
@@ -1,4 +1,4 @@
-package main
+package dnsttclient
 
 // Random selection from weighted distributions, and strings for specifying such
 // distributions.
diff --git a/dnstt-client/weightedlist_test.go b/dnstt-client/weightedlist_test.go
index 56dd6fc..ac84bf6 100644
--- a/dnstt-client/weightedlist_test.go
+++ b/dnstt-client/weightedlist_test.go
@@ -1,4 +1,4 @@
-package main
+package dnsttclient
 
 import (
 	"testing"
